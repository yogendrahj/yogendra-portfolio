name: Deploy Infrastructure and Website

on:
  push:
    paths:
      - 'terraform/**'
      - 'website/**'
    branches:
      - main
      - 'fea*/*'  # Trigger for feature branches
  pull_request:
    paths:
      - 'terraform/**'
      - 'website/**'
    branches:
      - main

permissions:
  id-token: write
  contents: read

jobs:
  # Job to handle Terraform plan and apply for infrastructure
  terraform:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Assume AWS OIDC Role
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::216989108476:role/GitHubActionsOIDC
          aws-region: eu-west-2

      - name: Set up AWS CLI with OIDC
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::216989108476:role/GitHubActionsOIDC
          aws-region: eu-west-2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      # Terraform Init
      - name: Terraform Init
        run: terraform init
        working-directory: terraform

      # Terraform Validate
      - name: Terraform Validate
        run: terraform validate
        working-directory: terraform

      # Terraform Plan for feature branches
      - name: Terraform Plan (Feature Branches)
        run: terraform plan -out=tfplan
        working-directory: terraform
        if: startsWith(github.ref, 'refs/heads/feauture/')  # Run plan only for feature branches

      # Terraform Plan (on main)
      - name: Terraform Plan (Main Branch)
        run: terraform plan -out=tfplan
        working-directory: terraform
        if: github.ref == 'refs/heads/main'  # Run plan only for main branch

      # Terraform Apply (Only on main after successful plan)
      - name: Terraform Apply (Main)
        run: terraform apply -auto-approve tfplan
        working-directory: terraform
        if: github.ref == 'refs/heads/main'  # Apply only on main branch, after plan

  # Job to deploy website to S3 and invalidate CloudFront cache

  deploy-website:
    runs-on: ubuntu-latest
    needs: terraform
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Assume AWS OIDC Role
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::216989108476:role/GitHubActionsOIDC
          aws-region: eu-west-2

      - name: Set up AWS CLI with OIDC
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::216989108476:role/GitHubActionsOIDC
          aws-region: eu-west-2

      - name: Get Terraform Outputs
        id: tf-outputs
        run: |
          echo "S3_BUCKET_NAME=$(terraform output -raw s3_bucket_name)" >> $GITHUB_ENV
          echo "CLOUDFRONT_ID=$(terraform output -raw cloudfront_distribution_id)" >> $GITHUB_ENV
        working-directory: terraform

      - name: Sync Website to S3
        run: |
          aws s3 sync ./website s3://$S3_BUCKET_NAME --delete
        if: github.ref == 'refs/heads/main'

      - name: Invalidate CloudFront Cache
        run: |
          aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_ID --paths "/*"
        if: github.ref == 'refs/heads/main'


